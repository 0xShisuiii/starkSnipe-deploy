#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Selector {
    IsMemecoin,
    Aggregate,
    Name,
    Symbol,
    IsLaunched,
    GetTeamAllocation,
    TotalSupply,
    Owner,
    LockedLiquidity,
    ExchangeAddress,
    Approve,
    GetRemainingTime,
    LaunchedWithLiquidityParameters,
    GetLockDetails,
    LaunchedAtBlockNumber,
    GetReserves,
    LiquidityPositionDetails,
    BalanceOfCamel,
    BalanceOf,
    Transfer,
    GetTokenInfos,
    ClearMinimum,
    Clear,
    MultihopSwap,
    MultiMultihopSwap,
    GetBalances,
}

// Returns the string representation of the selector
pub fn selector_to_str(selector: Selector) -> &'static str {
    match selector {
        Selector::IsMemecoin => "is_memecoin",
        Selector::Aggregate => "aggregate",
        Selector::Name => "name",
        Selector::Symbol => "symbol",
        Selector::IsLaunched => "is_launched",
        Selector::GetTeamAllocation => "get_team_allocation",
        Selector::TotalSupply => "total_supply",
        Selector::Owner => "owner",
        Selector::LockedLiquidity => "locked_liquidity",
        Selector::ExchangeAddress => "exchange_address",
        Selector::Approve => "approve",
        Selector::GetRemainingTime => "get_remaining_time",
        Selector::LaunchedWithLiquidityParameters => "launched_with_liquidity_parameters",
        Selector::GetLockDetails => "get_lock_details",
        Selector::LaunchedAtBlockNumber => "launched_at_block_number",
        Selector::GetReserves => "get_reserves",
        Selector::LiquidityPositionDetails => "liquidity_position_details",
        Selector::BalanceOfCamel => "balanceOf",
        Selector::BalanceOf => "balance_of",
        Selector::Transfer => "transfer",
        Selector::GetTokenInfos => "get_token_info",
        Selector::ClearMinimum => "clear_minimum",
        Selector::Clear => "clear",
        Selector::MultihopSwap => "multihop_swap",
        Selector::MultiMultihopSwap => "multi_multihop_swap",
        Selector::GetBalances => "get_balances",
    }
}
